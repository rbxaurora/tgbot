const express = require(`express`);
const app = express();
const { Telegraf } = require(`telegraf`);
const { message } = require(`telegraf/filters`);
require(`dotenv`).config();

const pid = process.pid();
const port = process.env.PORT || 3001;

app.listen(port, () => console.log(`Bot started!`));

// Mongoose
const mongoose = require(`mongoose`);
mongoose.connect(process.env.BD_TOKEN);

const Users = require(`./models/users`);
const Tea = require(`./models/tea`);
const Warns = require(`./models/warns`);
// -----------------

let time;
let textMessage;

// Bot settings
const bot = new Telegraf(process.env.BOT_TOKEN);

bot.start((ctx) => {
    ctx.reply(`Bot started!`);
});

bot.hears(/\–º—É—Ç (.+)/, async (ctx) => {
    if (ctx.message.reply_to_message) {
        const chatId = ctx.message.chat.id;
        const userId = ctx.message.reply_to_message.from.id;
        const userName = ctx.message.reply_to_message.from.first_name;
        const resp = ctx.match[1];
        minToUnix(resp);
        const untilDate = Math.floor((Date.now() + time) / 1000);

        const admin = Users.findOne({ auroraID: ctx.message.from.id });

        if (admin) {
            if (time) {
                ctx.telegram.sendMessage(chatId, `–£—á–∞—Å—Ç–Ω–∏–∫ <i>${userName}</i> [${userId}] <b>–±—ã–ª –æ–±–µ–∑–∑–≤—É—á–µ–Ω üîá –Ω–∞ ${time / 60000} –º–∏–Ω—É—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –•–∞—É—Å–∞ ${ctx.message.from.first_name}</b>. \n\n<i>–ü—Ä–∏—á–∏–Ω–∞: ${textMessage}</i>`, {
                    parse_mode: 'HTML'
                });
            } else {
                ctx.telegram.sendMessage(chatId, `–£—á–∞—Å—Ç–Ω–∏–∫ <i>${userName}</i> [${userId}] <b>–±—ã–ª –æ–±–µ–∑–∑–≤—É—á–µ–Ω üîá –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –•–∞—É—Å–∞ ${ctx.message.from.first_name}</b>. \n\n<i>–ü—Ä–∏—á–∏–Ω–∞: ${textMessage}</i>`, {
                    parse_mode: 'HTML'
                });
            }

            ctx.telegram.restrictChatMember(chatId, userId, {
                can_send_message: false,
                until_date: untilDate
            });
        } else {
            ctx.telegram.sendMessage(chatId, `‚ùå<b>–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–ª–Ω–æ–º–æ—á–∏–π –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.</b>`, {
                parse_mode: 'HTML'
            });
        }
    }
});

bot.hears(/\—Ä–∞–∑–º—É—Ç/, async (ctx) => {
    if (ctx.message.reply_to_message) {
        const chatId = ctx.message.chat.id;
        const userId = ctx.message.reply_to_message.from.id;
        const userName = ctx.message.reply_to_message.from.first_name;

        const admin = await Users.findOne({ auroraID: ctx.message.from.id });

        if (admin) {
            ctx.telegram.sendMessage(chatId, `‚úÖ–£—á–∞—Å—Ç–Ω–∏–∫ <i>${userName}</i> [${userId}] <b>–ø–æ–ª—É—á–∏–ª –ø—Ä–∞–≤–æ –≥–æ–≤–æ—Ä–∏—Ç—å –≤ –±–µ—Å–µ–¥–µ.</b>\n\n<i>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–ø—Ä–µ–¥—å –Ω–µ –Ω–∞—Ä—É—à–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ –•–∞—É—Å–∞üòâ</i>`, {
                parse_mode: 'HTML'
            });

            ctx.telegram.restrictChatMember(chatId, userId, {
                can_send_message: true,
                can_send_audios: true,
                can_send_documents: true,
                can_send_photos: true,
                can_send_videos: true,
                can_send_video_notes: true,
                can_send_voice_notes: true,
                can_send_polls: true,
                can_send_other_messages: true,
                can_add_web_page_previews: true
            });
        } else {
            ctx.telegram.sendMessage(chatId, `‚ùå<b>–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–ª–Ω–æ–º–æ—á–∏–π –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.</b>`, {
                parse_mode: 'HTML'
            });
        }
    }
});

bot.hears(/\–≤—ã–ø–∏—Ç—å —á–∞—é/, async (ctx) => {
    const chatId = ctx.message.chat.id;
    const userId = ctx.message.from.id;
    const userName = ctx.message.from.first_name;

    const drank = randomTea();

    let user = await Tea.findOne({ auroraID: userId });

    if (!user) {
        const tea = new Tea({
            username: userName,
            auroraID: userId,
            total: drank
        });

        await tea.save();
    } else {
        await Tea.updateOne({ auroraID: userId }, { $set: { username: userName } });
        await Tea.updateOne({ auroraID: userId }, { $inc: { total: drank } });
    }

    user = await Tea.findOne({ auroraID: userId });

    ctx.telegram.sendMessage(chatId, `üçµ${userName}, <b>—Ç—ã –≤—ã–ø–∏–ª(-–∞) ${drank} –ª–∏—Ç—Ä–æ–≤ —á–∞—è</b>.\n\n<i>–í—ã–ø–∏—Ç–æ –≤—Å–µ–≥–æ - ${user.total.toFixed(2)} –ª–∏—Ç—Ä–æ–≤.</i>`, {
        parse_mode: 'HTML'
    });
});

bot.hears(/\—á–∞–π–Ω—ã–π —Ç–æ–ø/, async (ctx) => {
    const chatId = ctx.message.chat.id;
    let top = `<b>üìä–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≤—ã–ø–∏—Ç–æ–≥–æ —á–∞—è –≤ —á–∞—Ç–µ</b>\n`;
    let total = 0;
    const teas = await Tea.find({}).sort({ total: -1 });

    for (let i = 0; i < teas.length; i++) {
        const tea = teas[i];
        total = total + Number(tea.total.toFixed(2));
        top += `\n${i+1}. <b>${tea.username}</b> - ${tea.total.toFixed(2)} –ª–∏—Ç—Ä–æ–≤`;
    }
    top += `\n\n<i>–í—Å–µ–≥–æ –ª–∏—Ç—Ä–æ–≤ –≤—ã–ø–∏—Ç–æ - ${total.toFixed(2)}</i>`;

    ctx.telegram.sendMessage(chatId, top, {
        parse_mode: 'HTML'
    });
});

bot.hears(/\–≤–∞—Ä–Ω (.+)/, async (ctx) => {
    warn(ctx);
})

bot.hears(/\–≤–∞—Ä–µ–Ω–∏–∫ (.+)/, async (ctx) => {
    warn(ctx);
});

bot.hears(/\—Å–Ω—è—Ç—å –≤–∞—Ä–Ω—ã/, async (ctx) => {
    if (ctx.message.reply_to_message) {
        const chatId = ctx.message.chat.id;
        const userId = ctx.message.reply_to_message.from.id;
        const userName = ctx.message.reply_to_message.from.first_name;

        const admin = await Users.findOne({ auroraID: userId });

        if (admin) {
            await Warns.deleteOne({ auroraID: userId });
            ctx.telegram.sendMessage(chatId, `‚úÖ–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä <i>${ctx.message.from.first_name}</i> <b>—Å–Ω—è–ª –≤—Å–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –•–∞—É—Å–∞ - ${userName}</b>`, {
                parse_mode: 'HTML'
            });
        } else {
            ctx.telegram.sendMessage(chatId, `‚ùå<b>–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–ª–Ω–æ–º–æ—á–∏–π –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.</b>`, {
                parse_mode: 'HTML'
            });
        }
    }
});

bot.hears(/\–∏–∑–Ω–∞—Å–∏–ª–æ–≤–∞—Ç—å/, (ctx) => {
    if (ctx.message.reply_to_message) {
        const chatId = ctx.message.chat.id;
        const userName = ctx.message.reply_to_message.from.first_name;
        const ispName = ctx.message.from.first_name;

        ctx.telegram.sendMessage(chatId, `ü•µ | <b>${ispName}</b> –∂–µ—Å–∫–æ –∏–∑–Ω–∞—Å–∏–ª–æ–≤–∞–ª(-–∞) <b>${userName}</b>`, {
            parse_mode: 'HTML'
        });
    }
})

bot.on(message('text'), (ctx) => {
    const chatId = ctx.message.chat.id;
    const text = ctx.message.text;

    if (text == `–±–æ—Ç` || text == `–ë–æ—Ç`) {
        ctx.telegram.sendMessage(chatId, `‚úÖ–ë–æ—Ç –Ω–∞ –º–µ—Å—Ç–µ!`)
    }
});


bot.launch();
// ---------------------

// STOP
process.once('SIGINT', () => {
    bot.stop('SIGINT');
});
process.once('SIGTERM', () => {
    bot.stop('SIGTERM');
});
// -------------------------

// Functions
function minToUnix(resp) {
    if (resp.includes('10–º') || resp.includes('15–º')) {
        time = Number(resp.slice(0, 2) * 60000);
        textMessage = resp.slice(4);
    } else if (resp.includes('5–º')) {
        time = Number(resp.slice(0, 1) * 60000);
        textMessage = resp.slice(3);
    } else {
        textMessage = resp;
    }
}

function randomTea(){
    let drink = Math.random() * 10;
    return drink.toFixed(2);
}

async function warn(ctx){
    if (ctx.message.reply_to_message) {
        const chatId = ctx.message.chat.id;
        const userId = ctx.message.reply_to_message.from.id;
        const userName = ctx.message.reply_to_message.from.first_name;
        const resp = ctx.match[1];

        const admin = await Users.findOne({ auroraID: ctx.message.from.id });

        if (admin) {
            let user = await Warns.findOne({ auroraID: userId });

            if (!user) {
                const warn = new Warns({
                    username: userName,
                    auroraID: userId,
                    total: 1
                });

                await warn.save();
            } else {
                await Warns.updateOne({ auroraID: userId }, { $inc: { total: 1 } });
            }

            user = await Warns.findOne({ auroraID: userId });

            if (user.total <= 5) {
                ctx.telegram.sendMessage(chatId, `‚ùó–£—á–∞—Å—Ç–Ω–∏–∫ <i>${userName}</i> [${userId}] <b>–ø–æ–ª—É—á–∏–ª ${user.total}</b> –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∏–∑ 6.\n–í—ã–¥–∞–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –•–∞—É—Å–∞ ${ctx.message.from.first_name}\n\n<i>–ü—Ä–∏—á–∏–Ω–∞: ${resp}</i>`, {
                    parse_mode: 'HTML'
                });
            } else if (user.total = 6) {
                ctx.telegram.banChatMember(chatId, userId);
                ctx.telegram.sendMessage(chatId, `‚õî–£—á–∞—Å—Ç–Ω–∏–∫ <i>${userName}</i> [${userId}] <b>–±—ã–ª –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ –•–∞—É—Å–∞ —Å –ø–æ—Å–ª–µ–¥—É—é—â–∏–º –∑–∞–Ω–µ—Å–µ–Ω–∏–µ–º –≤ –ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º ${ctx.message.from.first_name}</b>\n\n<i>–ü—Ä–∏—á–∏–Ω–∞: –ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π</i>`, {
                    parse_mode: 'HTML'
                });

                await Warns.deleteOne({ auroraId: userId });
            }
        } else {
            ctx.telegram.sendMessage(chatId, `‚ùå<b>–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–ª–Ω–æ–º–æ—á–∏–π –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.</b>`, {
                parse_mode: 'HTML'
            });
        }
    }
}

app.get(`/`, (req, res) => {
    res.send(`Bot launched successfully. PID: ${pid}`);
});