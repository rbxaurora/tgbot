const express = require(`express`);
const app = express();
const { Telegraf } = require(`telegraf`);
const { message } = require(`telegraf/filters`);
require(`dotenv`).config();

const port = Number(process.env.PORT) + 1;

app.listen(port, () => console.log(`Bot launched successfully.`));

const bot = new Telegraf(process.env.CHAT_BOT_TOKEN);

// Mongoose
const mongoose = require(`mongoose`);
mongoose.connect(process.env.BD_TOKEN);

const Black = require(`./models/black`);
const Users = require(`./models/users`);
const Ankets = require(`./models/ankets`);
// --------

bot.command('start', async (ctx) => {
    const chatId = ctx.message.chat.id;
    const userId = ctx.message.from.id;
    const userName = ctx.message.from.first_name;

    const user = await Black.findOne({ userId: userId });

    if (!user && chatId != process.env.AURORA_TEAM_CHAT_ID && chatId != process.env.ADMIN_CHAT_ID) {
        ctx.telegram.sendMessage(chatId, `
        <b>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${userName}üëã</b>\n–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç ${ctx.botInfo.first_name} –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π AURORA TEAM. –ó–¥–µ—Å—å –í—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –ø–æ –ª—é–±–æ–º—É –≤–æ–ø—Ä–æ—Å—É –∏–ª–∏ –ø–æ–ø–∞—Å—Ç—å –≤ –•–∞—É—Å.\n\n‚Ñπ–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∞–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–í—Å—Ç—É–ø–∏—Ç—å –≤ –•–∞—É—Å", –∫–æ—Ç–æ—Ä–∞—è –ø–æ—è–≤–∏—Ç—Å—è –Ω–∏–∂–µ.\n\n<i>‚Äº–í–∞–∂–Ω–æ: –ê–Ω–∫–µ—Ç—ã, —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–æ—Å–∏—Ç –æ—Å–∫–æ—Ä–±–∏—Ç–µ–ª—å–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä, –∏–ª–∏ –Ω–µ –∏–º–µ–µ—Ç –Ω–∏–∫–∞–∫–æ–≥–æ –æ—Ç–Ω–æ—à–µ–Ω–∏—è –∫ –∞–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏—é, —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—é –Ω–µ –ø–æ–¥–ª–µ–∂–∞—Ç –∏ –±—É–¥—É—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –•–∞—É—Å–∞.</i>`, {
            parse_mode: 'HTML'
        });

        ctx.telegram.sendMessage(chatId, `‚ú®–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–ø–æ–ª–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ. \n\n–í–∞–∂–Ω–æ: –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Ç–æ–ª—å–∫–æ 1 —Ä–∞–∑!`, {
            reply_markup: {
                inline_keyboard: [
                    [{
                        text: "–ù–∞—á–∞—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã",
                        callback_data: "anketa"
                    }]
                ]
            },
            parse_mode: 'HTML'
        });
    } else if (user) {
        ctx.telegram.sendMessage(chatId, `‚ùå–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ß–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ –•–∞—É—Å–∞ –∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n\n–î–æ—Å—Ç—É–ø –∫ —á–∞—Ç-–±–æ—Ç—É <b>–∑–∞–ø—Ä–µ—â–µ–Ω</b>.`, {
            parse_mode: 'HTML'
        });
    }
});

bot.on('callback_query', async (ctx) => {
    const chatId = ctx.callbackQuery.message.chat.id;
    const msgId = ctx.callbackQuery.message.message_id;
    const msgText = ctx.callbackQuery.message.text;
    const data = ctx.callbackQuery.data;
    const userId = ctx.callbackQuery.from.id;
    const userName = ctx.callbackQuery.from.first_name;
    const queryId = ctx.callbackQuery.id;
    
    const user = await  Ankets.findOne({ userId: userId });
    
    if (data == `anketa` && !user) {
        ctx.telegram.sendMessage(chatId, `‚úÖ<b>–ì–æ—Ç–æ–≤–∏–º —Ñ–æ—Ä–º—É –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã!</b>\n<i>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω—è–π—Ç–µ —Ñ–æ—Ä–º—É –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –∏ –±–µ–∑ –æ—à–∏–±–æ–∫, –∏–Ω–∞—á–µ –±–æ—Ç –æ—Ç–∫–ª–æ–Ω–∏—Ç –í–∞—à—É –∞–Ω–∫–µ—Ç—É –∏ –í—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É.</i>\n\nüíå–í –æ—Ç–≤–µ—Ç–∞—Ö –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç–∏–∫–µ—Ä–æ–≤, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏ GIF-–∫–∞—Ä—Ç–∏–Ω–æ–∫.`, {
            parse_mode: 'HTML'
        });

        let question = `üíå–í–æ–ø—Ä–æ—Å || 1\n\n–í–≤–µ–¥–∏—Ç–µ –í–∞—à–µ –∏–º—è.`;

        const user = new Ankets({
            userId: userId,
            question: 1
        });

        await user.save();

        setTimeout(async () => {
            ctx.telegram.sendMessage(chatId, question);
        }, 5000);
    } else if (data == `anketa` && user) {
        ctx.telegram.answerCbQuery(queryId, `‚õî–í—ã —É–∂–µ –∑–∞–ø–æ–ª–Ω—è–ª–∏ –∞–Ω–∫–µ—Ç—É!`);
    }
    
    if (data.includes(`accept`)) {
        const anketaId = data.slice(7);
        const admin = await Users.findOne({ auroraID: userId });
        
        if (admin && (admin.role == `owner` || admin.role == `deputy`)) {
            await Ankets.updateOne({ userId: anketaId }, { $set: { status: `–û–¥–æ–±—Ä–µ–Ω–æ` } });

            const auroraChat = process.env.AURORA_TEAM_CHAT_ID;
            const joinLink = await ctx.telegram.createChatInviteLink(auroraChat, {
                member_limit: 1
            });

            let messageText = msgText.slice(0, -49);
            messageText += `\n‚úÖ–ê–Ω–∫–µ—Ç–∞ –±—ã–ª–∞ <b>–æ–¥–æ–±—Ä–µ–Ω–∞</b>`;

            ctx.telegram.editMessageReplyMarkup(chatId, msgId);
            ctx.telegram.editMessageText(chatId, msgId, undefined, messageText, {
                parse_mode: 'HTML'
            });

            ctx.telegram.sendPhoto(anketaId, `https://em-content.zobj.net/socialmedia/apple/81/party-popper_1f389.png`, {
                caption: `üéâ–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! <b>–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –±—ã–ª–∞ –æ–¥–æ–±—Ä–µ–Ω–∞ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –•–∞—É—Å–∞</b> - ${userName}.\n–í—ã –ø—Ä–∏–Ω—è—Ç—ã –≤ AURORA TEAM. –ñ–¥–µ–º –í–∞—Å —Å –Ω–µ—Ç–µ—Ä–ø–µ–Ω–∏–µ–º –≤ –Ω–∞—à–µ–º —É—é—Ç–Ω–æ–º —á–∞—Ç–µ!\n\n<i>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—Å—Ç—É–ø–∏—Ç–µ –≤ —á–∞—Ç –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –•–∞—É—Å–∞ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ:</i>`,
                reply_markup: {
                    inline_keyboard: [
                        [{
                            text: "üíéAURORA TEAMüíé",
                            url: `${joinLink.invite_link}`
                        }]
                    ]
                },
                parse_mode: 'HTML'
            });
        } else {
            ctx.telegram.answerCbQuery(queryId, `‚ùå–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–ª–Ω–æ–º–æ—á–∏–π –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã.`);
        }
    } else if (data.includes(`decline`)) {
        const anketaId = data.slice(8);
        const admin = await Users.findOne({ auroraID: userId });

        if (admin && (admin.role == `owner` || admin.role == `deputy`)) {

            let messageText = msgText.slice(0, -49);
            messageText += `\n<i>‚Ñπ–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞:</i>`;

            ctx.telegram.editMessageText(chatId, msgId, undefined, messageText, {
                reply_markup: {
                    inline_keyboard: [
                        [{
                            text: "üîû–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤–æ–∑—Ä–∞—Å—Ç—É",
                            callback_data: "notage_" + anketaId
                        }],
                        [{
                            text: "‚ùå–ê–Ω–∫–µ—Ç–∞ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞",
                            callback_data: "noanket_" + anketaId
                        }],
                        [{
                            text: "‚õî–ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –•–∞—É—Å–∞",
                            callback_data: "blacklist_" + anketaId
                        }]
                    ]
                },
                parse_mode: 'HTML'
            });

        } else {
            ctx.telegram.answerCbQuery(queryId, `‚ùå–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–ª–Ω–æ–º–æ—á–∏–π –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã.`);
        }

    } else if (data.includes(`notage`)) {
        const anketaId = data.slice(7);
        const admin = await Users.findOne({ auroraID: userId });

        if (admin && (admin.role == `owner` || admin.role == `deputy`)) {
            await Ankets.updateOne({ userId: anketaId }, { $set: { status: `–û—Ç–∫–ª–æ–Ω–µ–Ω–æ` } });

            let messageText = msgText.slice(0, -49);
            messageText += `\n\n‚õî–ê–Ω–∫–µ—Ç–∞ –±—ã–ª–∞ <b>–æ—Ç–∫–ª–æ–Ω–µ–Ω–∞</b>.`;

            ctx.telegram.editMessageReplyMarkup(chatId, msgId);
            ctx.telegram.editMessageText(chatId, msgId, undefined, messageText, {
                parse_mode: 'HTML'
            });
            
            ctx.telegram.sendPhoto(anketaId, `https://em-content.zobj.net/socialmedia/apple/81/cross-mark_274c.png`, {
                caption: `‚ùå–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, <b>–í—ã –Ω–∞–º –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç–µ –∏–∑-–∑–∞ –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π</b>. –í–∞—à –≤–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å <i>–æ—Ç 11 –¥–æ 15 –ª–µ—Ç –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ</i>.\n–í—ã –±–æ–ª—å—à–µ –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É, –æ–¥–Ω–∞–∫–æ –µ—Å–ª–∏ –í—ã –Ω–µ —Å–æ–≥–ª–∞—Å–Ω—ã —Å —Ä–µ—à–µ–Ω–∏–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–ª–∏ —ç—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ –æ—à–∏–±–æ—á–Ω–æ, —Ç–æ –í—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ —á–∞—Ç –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ\n\n<i>‚Ñπ–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –±—ã–ª–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –•–∞—É—Å–∞ - ${userName}</i>`,
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [{
                            text: "üíå–ß–∞—Ç –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤",
                            url: "https://t.me/+12XF5x1u-gc1MDAy"
                        }]
                    ]
                }
            });
        } else {
            ctx.telegram.answerCbQuery(queryId, `‚ùå–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–ª–Ω–æ–º–æ—á–∏–π –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã.`);
        }

    } else if (data.includes(`noanket`)) {
        const anketaId = data.slice(8);
        const admin = await Users.findOne({ auroraID: userId });

        if (admin && (admin.role == `owner` || admin.role == `deputy`)) {
            await Ankets.updateOne({ userId: anketaId }, { $set: { status: `–û—Ç–∫–ª–æ–Ω–µ–Ω–æ` } });

            let messageText = msgText.slice(0, -49);
            messageText += `\n\n‚õî–ê–Ω–∫–µ—Ç–∞ –±—ã–ª–∞ <b>–æ—Ç–∫–ª–æ–Ω–µ–Ω–∞</b>.`;

            ctx.telegram.editMessageReplyMarkup(chatId, msgId);
            ctx.telegram.editMessageText(chatId, msgId, undefined, messageText, {
                parse_mode: 'HTML'
            });

            const black = new Black({
                userId: anketaId,
                reason: `–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–∞—è –∞–Ω–∫–µ—Ç–∞`
            });

            await black.save();
            
            ctx.telegram.sendPhoto(anketaId, `https://em-content.zobj.net/socialmedia/apple/81/cross-mark_274c.png`, {
                caption: `‚ùå–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –•–∞—É—Å–∞ <b>–ø–æ—Å—á–∏—Ç–∞–ª–∞ –í–∞—à—É –∞–Ω–∫–µ—Ç—É –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—É—é, –í–∞–º –∑–∞–ø—Ä–µ—â–µ–Ω –≤—Ö–æ–¥ –≤ AURORA TEAM</b>.\n–í—ã –±–æ–ª—å—à–µ –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É, –æ–¥–Ω–∞–∫–æ –µ—Å–ª–∏ –í—ã –Ω–µ —Å–æ–≥–ª–∞—Å–Ω—ã —Å —Ä–µ—à–µ–Ω–∏–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–ª–∏ —ç—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ –æ—à–∏–±–æ—á–Ω–æ, —Ç–æ –í—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ —á–∞—Ç –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ\n\n<i>‚Ñπ–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –±—ã–ª–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –•–∞—É—Å–∞ - ${userName}</i>`,
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [{
                            text: "üíå–ß–∞—Ç –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤",
                            url: "https://t.me/+12XF5x1u-gc1MDAy"
                        }]
                    ]
                }
            });
        } else {
            ctx.telegram.answerCbQuery(queryId, `‚ùå–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–ª–Ω–æ–º–æ—á–∏–π –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã.`);
        }
    } else if (data.includes(`blacklist`)) {
        const anketaId = data.slice(10);
        const admin = await Users.findOne({ auroraID: userId });

        if (admin && (admin.role == `owner` || admin.role == `deputy`)) {
            await Ankets.updateOne({ userId: anketaId }, { $set: { status: `–û—Ç–∫–ª–æ–Ω–µ–Ω–æ` } });

            let messageText = msgText.slice(0, -49);
            messageText += `\n\n‚õî–ê–Ω–∫–µ—Ç–∞ –±—ã–ª–∞ <b>–æ—Ç–∫–ª–æ–Ω–µ–Ω–∞</b>.`;

            ctx.telegram.editMessageReplyMarkup(chatId, msgId);
            ctx.telegram.editMessageText(chatId, msgId, undefined, messageText, {
                parse_mode: 'HTML'
            });

            const black = new Black({
                userId: anketaId,
                reason: `–ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –•–∞—É—Å–∞`
            });

            await black.save();
            
            ctx.telegram.sendPhoto(anketaId, `https://em-content.zobj.net/socialmedia/apple/81/cross-mark_274c.png`, {
                caption: `‚ùå<b>–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ß–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ –•–∞—É—Å–∞</b>. –î–æ—Å—Ç—É–ø –∫ —á–∞—Ç–∞–º AURORA TEAM –∏ —á–∞—Ç-–±–æ—Ç—É <i>–∑–∞–ø—Ä–µ—â–µ–Ω</i>.\n\n<i>‚Ñπ–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –±—ã–ª–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –•–∞—É—Å–∞ - ${userName}</i>`,
                parse_mode: 'HTML'
            });
        } else {
            ctx.telegram.answerCbQuery(queryId, `‚ùå–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–ª–Ω–æ–º–æ—á–∏–π –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã.`);
        }
    }
});

bot.on(message('text'), async (ctx) => {
    const chatId = ctx.message.chat.id;
    const userId = ctx.message.from.id;

    const user = await Ankets.findOne({ userId: userId });

    if (chatId != process.env.AURORA_TEAM_CHAT_ID && chatId != process.env.ADMIN_CHAT_ID) {
        if (user.question == 1) {
            let name = ctx.message.text;
            let question = `üíå–í–æ–ø—Ä–æ—Å || 2\n\n–í–≤–µ–¥–∏—Ç–µ –í–∞—à –≤–æ–∑—Ä–∞—Å—Ç.`;
    
            await Ankets.updateOne({ userId: userId }, { $set: { question: 2, name: name } });
            ctx.telegram.sendMessage(chatId, question);
    
        } else if (user.question == 2) {
            if (!isNaN(ctx.message.text)) {
                let age = ctx.message.text;
                let question = `üíå–í–æ–ø—Ä–æ—Å || 3\n\n–ù–∞ —Å–∫–æ–ª—å–∫–æ –í—ã –≥–æ—Ç–æ–≤—ã –ø—Ä–æ—è–≤–ª—è—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –Ω–∞—à–µ–º –•–∞—É—Å–µ?`;
    
                await Ankets.updateOne({ userId: userId }, { $set: { question: 3, age: age } });
                ctx.telegram.sendMessage(chatId, question);
    
            } else {
                ctx.telegram.sendMessage(chatId, `<b>‚ùå–í–≤–µ–¥–µ–Ω—ã–π –æ—Ç–≤–µ—Ç —è–≤–ª—è–µ—Ç—Å—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —Ü–∏—Ñ—Ä–∞–º–∏.</b>`, {
                    parse_mode: 'HTML'
                });
            }
    
        } else if (user.question == 3) {
            let activity = ctx.message.text;
            let question = `üíå–í–æ–ø—Ä–æ—Å || 4\n\n–í–≤–µ–¥–∏—Ç–µ –í–∞—à –Ω–∏–∫ –≤ TikTok.`;
    
            await Ankets.updateOne({ userId: userId }, { $set: { question: 4, activity: activity } });
            ctx.telegram.sendMessage(chatId, question);
        } else if (user.question == 4) {
            let tiktok = ctx.message.text;
            let question = `üíå–í–æ–ø—Ä–æ—Å || 5\n\n–í–≤–µ–¥–∏—Ç–µ –í–∞—à –Ω–∏–∫ –≤ Roblox.`;
    
            await Ankets.updateOne({ userId: userId }, { $set: { question: 5, tiktok: tiktok } });
            ctx.telegram.sendMessage(chatId, question);
        } else if (user.question == 5) {
            let roblox = ctx.message.text;
            let question = `üíå–í–æ–ø—Ä–æ—Å || 6\n\n–í–≤–µ–¥–∏—Ç–µ –í–∞—à —Å—Ç–∏–ª—å —Å–∫–∏–Ω–∞.`;
    
            await Ankets.updateOne({ userId: userId }, { $set: { question: 6, roblox: roblox } });
            ctx.telegram.sendMessage(chatId, question);
        } else if (user.question == 6) {
            let skin = ctx.message.text;
            let question = `üíå–í–æ–ø—Ä–æ—Å || 6\n\n–í–≤–µ–¥–∏—Ç–µ –í–∞—à—É –º–∞—Ä–∫—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞.`;
    
            await Ankets.updateOne({ userId: userId }, { $set: { question: 7, skin: skin } });
            ctx.telegram.sendMessage(chatId, question);
        } else if (user.question == 7) {
            let phone = ctx.message.text;
            let question = `üíå–í–æ–ø—Ä–æ—Å || 7\n\n–ü–æ—á–µ–º—É –í—ã —Ä–µ—à–∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –∏–º–µ–Ω–Ω–æ –Ω–∞—à—É –∫–æ–º–∞–Ω–¥—É?`;
    
            await Ankets.updateOne({ userId: userId }, { $set: { question: 8, phone: phone } });
            ctx.telegram.sendMessage(chatId, question);
        } else if (user.question == 8) {
            let whyus = ctx.message.text;
    
            await Ankets.updateOne({ userId: userId }, { $set: { whyus: whyus, status: `–ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏`, question: 0 } });
            ctx.telegram.sendMessage(chatId, `‚úÖ<b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞</b> –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –•–∞—É—Å–∞ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è.\n\n<i>–û —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è –º—ã —Å–æ–æ–±—â–∏–º –í–∞–º –≤ —ç—Ç–æ–º —á–∞—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ —É–¥–∞–ª—è–π—Ç–µ –ø–µ—Ä–µ–ø–∏—Å–∫—É —Å –¥–∞–Ω–Ω—ã–º –±–æ—Ç–æ–º.</i>`, {
                parse_mode: 'HTML'
            });
    
            sendToAdmins(ctx, userId);
        }
    }
});

bot.launch();

app.get(`/`, (req, res) => {
    res.send(`Bot launched successfully!`);
});

async function sendToAdmins(ctx, userId) {
    const adminChatId = process.env.ADMIN_CHAT_ID;

    const anketa = await Ankets.findOne({ userId: userId });

    ctx.telegram.sendMessage(adminChatId, `‚ùó<b>–í –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç—É–ø–∏–ª–∞ –Ω–æ–≤–∞—è –∞–Ω–∫–µ—Ç–∞:</b>\n\n–ò–º—è: <a href="tg://user?id=${anketa.userId}">${anketa.name}</a>\n–í–æ–∑—Ä–∞—Å—Ç: ${anketa.age}\n–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${anketa.activity}\nTikTok: ${anketa.tiktok}\nRoblox: ${anketa.roblox}\n–°—Ç–∏–ª—å —Å–∫–∏–Ω–∞: ${anketa.skin}\n–ú–∞—Ä–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ${anketa.phone}\n–ü–æ—á–µ–º—É —Ä–µ—à–∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –Ω–∞—Å: ${anketa.whyus}\n\n<i>–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –í—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å –¥–∞–Ω–Ω–æ–π –∞–Ω–∫–µ—Ç–æ–π:</i>`, {
        reply_markup: {
            inline_keyboard: [
                [{
                    text: "‚ùå–û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                    callback_data: "decline_" + anketa.userId
                }, {
                    text: "‚úÖ–ü—Ä–∏–Ω—è—Ç—å",
                    callback_data: "accept_" + anketa.userId
                }]
            ]
        },
        parse_mode: 'HTML'
    });
}

process.once('SIGINT', () => {
    bot.stop('SIGINT');
});
process.once('SIGTERM', () => {
    bor.stop('SIGTERM');
});